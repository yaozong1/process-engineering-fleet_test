"use client"
import { useState, useRef, useEffect } from 'react'
import mqtt, { MqttClient } from 'mqtt'

interface LogItem { ts: number; level: 'info' | 'error'; msg: string }

export default function MQTTConnectPage() {
  const [host, setHost] = useState('')
  const [port, setPort] = useState('443')
  const [path, setPath] = useState('/mqtt')
  const [clientId, setClientId] = useState('')
  const [username, setUsername] = useState('')
  const [password, setPassword] = useState('')
  const [clean, setClean] = useState(true)
  const [keepalive, setKeepalive] = useState(60)
  const [status, setStatus] = useState<'idle'|'connecting'|'connected'|'error'>('idle')
  const [subTopic, setSubTopic] = useState('')
  const [pubTopic, setPubTopic] = useState('')
  const [pubPayload, setPubPayload] = useState('')
  const [logs, setLogs] = useState<LogItem[]>([])
  const clientRef = useRef<MqttClient | null>(null)

  function log(level: 'info'|'error', msg: string) {
    setLogs(l => [{ ts: Date.now(), level, msg }, ...l].slice(0,500))
  }

  function buildUrl() {
    if (!host) return ''
    const h = host.replace(/^wss:\/\//,'').replace(/^mqtts:\/\//,'').trim()
    return `wss://${h}:${port}${path}`.replace(':443/','/').replace(':443$','')
  }

  function handleConnect() {
    const url = buildUrl()
    if (!url) { log('error','Host 为空'); return }
    if (clientRef.current) { clientRef.current.end(true); clientRef.current = null }
    setStatus('connecting')
    log('info', `Connecting to ${url}`)
    try {
      const c = mqtt.connect(url, {
        clientId: clientId || undefined,
        username: username || undefined,
        password: password || undefined,
        clean,
        keepalive,
        reconnectPeriod: 0,
        protocolVersion: 4
      })
      clientRef.current = c
      c.on('connect', () => { setStatus('connected'); log('info','Connected') })
      c.on('error', (e) => { setStatus('error'); log('error', 'Error: ' + (e?.message || e)) })
      c.on('close', () => { if (status !== 'error') setStatus('idle'); log('info','Connection closed') })
      c.on('message', (topic, payload) => {
        log('info', `Message ${topic}: ${payload.toString()}`)
      })
    } catch (e:any) {
      setStatus('error')
      log('error','Connect throw: ' + e?.message || String(e))
    }
  }

  function handleDisconnect() {
    if (clientRef.current) {
      clientRef.current.end(true)
      clientRef.current = null
      log('info','Manual disconnect')
      setStatus('idle')
    }
  }

  function handleSubscribe() {
    if (!clientRef.current) { log('error','未连接'); return }
    if (!subTopic.trim()) { log('error','订阅主题为空'); return }
    clientRef.current.subscribe(subTopic.trim(), (err) => {
      if (err) log('error','订阅失败: ' + err.message)
      else log('info','Subscribed: ' + subTopic.trim())
    })
  }

  function handlePublish() {
    if (!clientRef.current) { log('error','未连接'); return }
    if (!pubTopic.trim()) { log('error','发布主题为空'); return }
    clientRef.current.publish(pubTopic.trim(), pubPayload, { qos: 0 }, (err) => {
      if (err) log('error','发布失败: ' + err.message)
      else log('info',`Published ${pubTopic.trim()} (${pubPayload.length} bytes)`) })
  }

  useEffect(() => () => { clientRef.current?.end(true) }, [])

  return (
    <div className="p-6 space-y-6 max-w-5xl mx-auto">
      <h1 className="text-2xl font-bold">MQTT 连接测试</h1>
      <div className="grid md:grid-cols-2 gap-6">
        <div className="space-y-4">
          <fieldset className="space-y-2 border p-4 rounded">
            <legend className="font-medium">连接参数</legend>
            <div className="grid grid-cols-3 gap-2 items-center">
              <label className="text-sm">Host</label>
              <input className="col-span-2 border rounded px-2 py-1 text-sm" value={host} onChange={e=>setHost(e.target.value)} placeholder="iot-xxxx.mqtt.iothub.aliyuncs.com" />
              <label className="text-sm">Port</label>
              <input className="col-span-2 border rounded px-2 py-1 text-sm" value={port} onChange={e=>setPort(e.target.value)} />
              <label className="text-sm">Path</label>
              <input className="col-span-2 border rounded px-2 py-1 text-sm" value={path} onChange={e=>setPath(e.target.value)} />
              <label className="text-sm">Client ID</label>
              <input className="col-span-2 border rounded px-2 py-1 text-sm" value={clientId} onChange={e=>setClientId(e.target.value)} />
              <label className="text-sm">Username</label>
              <input className="col-span-2 border rounded px-2 py-1 text-sm" value={username} onChange={e=>setUsername(e.target.value)} />
              <label className="text-sm">Password</label>
              <input className="col-span-2 border rounded px-2 py-1 text-sm" type="password" value={password} onChange={e=>setPassword(e.target.value)} />
              <label className="text-sm">Keepalive</label>
              <input className="col-span-2 border rounded px-2 py-1 text-sm" type="number" value={keepalive} onChange={e=>setKeepalive(Number(e.target.value)||0)} />
              <label className="text-sm">Clean Session</label>
              <input className="col-span-2" type="checkbox" checked={clean} onChange={e=>setClean(e.target.checked)} />
            </div>
            <div className="flex gap-2 pt-2">
              <button onClick={handleConnect} disabled={status==='connecting'} className="px-3 py-1 text-sm rounded bg-green-600 text-white disabled:opacity-50">连接</button>
              <button onClick={handleDisconnect} className="px-3 py-1 text-sm rounded bg-gray-600 text-white">断开</button>
              <span className="text-sm">状态: {status}</span>
            </div>
            <div className="text-xs text-gray-500 truncate">URL: {buildUrl() || '(未生成)'}</div>
          </fieldset>

          <fieldset className="space-y-2 border p-4 rounded">
            <legend className="font-medium">订阅 / 发布</legend>
            <div className="space-y-2">
              <div className="flex gap-2">
                <input className="flex-1 border rounded px-2 py-1 text-sm" placeholder="订阅主题" value={subTopic} onChange={e=>setSubTopic(e.target.value)} />
                <button onClick={handleSubscribe} className="px-3 py-1 text-sm rounded bg-blue-600 text-white">订阅</button>
              </div>
              <div className="flex gap-2">
                <input className="flex-1 border rounded px-2 py-1 text-sm" placeholder="发布主题" value={pubTopic} onChange={e=>setPubTopic(e.target.value)} />
                <button onClick={handlePublish} className="px-3 py-1 text-sm rounded bg-indigo-600 text-white">发布</button>
              </div>
              <textarea className="w-full border rounded px-2 py-1 text-sm h-24" placeholder="消息内容" value={pubPayload} onChange={e=>setPubPayload(e.target.value)} />
            </div>
          </fieldset>
        </div>

        <div className="space-y-2">
            <div className="flex items-center justify-between">
              <h2 className="font-medium">日志</h2>
              <button className="text-xs underline" onClick={()=>setLogs([])}>清空</button>
            </div>
            <div className="border rounded h-[540px] overflow-auto bg-black text-xs font-mono p-2 text-gray-100 space-y-1">
              {logs.map(l => (
                <div key={l.ts+Math.random()} className={l.level==='error'? 'text-red-400' : 'text-green-300'}>
                  {new Date(l.ts).toLocaleTimeString()} [{l.level}] {l.msg}
                </div>
              ))}
              {logs.length===0 && <div className="text-gray-500">无日志</div>}
            </div>
        </div>
      </div>
      <div className="text-xs text-gray-500 space-y-1">
        <p>提示: 浏览器仅支持 WebSocket (wss) 方式。阿里云实例通常使用 host: iot-xxxxxx.mqtt.iothub.aliyuncs.com, 端口 443, path /mqtt。</p>
        <p>若连接阿里云需要 HMAC 动态签名，可先在外部工具生成 ClientId/Username/Password 再粘贴。</p>
      </div>
    </div>
  )
}
